\documentclass{article}

% specify required packages
\usepackage{fullpage}
\usepackage{graphicx}

\begin{document}

\begin{titlepage}
   \vspace*{\stretch{1.0}}
   \begin{center}
      \Large\textbf{R and Google Maps}\\
      \large\textit{Jim Thompson}\\
      \large{August 2014}
   \end{center}
   \vspace*{\stretch{2.0}}
\end{titlepage}

\section*{Create Map}
This paper demonstrates use of R packages \textbf{ggmap} and related packages for 
visualizing and analyzing spatial data.

\textbf{ggmap} provides functions to visualize spatial data on top of maps built on
top of Google Maps, OpenStreetMaps, Stamen Maps, or CloudMade Maps.  Some of specific 
functions provided
\begin{itemize}
    \item Geocode addresses
    \item Support \textbf{ggplot2} layer functions to enrich map
\end{itemize}

<<,message=FALSE,warning=FALSE>>=
###
# Geocode and map address
###
library(ggmap)

address.of.interest <- "8250 Jones Branch Dr., McLean, VA"

# call Google web service API to geocode the address
location <- geocode(address.of.interest,output="more")

# show resulting geocoded address
cat("property is located at lon=",location[1,1],", lat=",location[1,2],"\n")
@

Following code fragment draws and annotates a Google map centered on the specified location.
<<,message=FALSE,warning=FALSE>>=
# create Google map centered on address
this.map <- get_map(address.of.interest,16)

# draw map and annotate
ggmap(this.map) +
    # plot plot
    geom_point(aes(x=lon, y=lat), data=location, shape=4, size=5, color="red") +
    
    # label point
    geom_text(aes(x=lon, y=lat), data= location, label=address.of.interest, 
              size=4,
              hjust=0.5, vjust=1.5,
              color="red", fontface="bold")
@

\section*{Simulated Use Case}
This 

\subsection*{Simulated Property Data}
\begin{figure}
    \centering
    \includegraphics[width=\maxwidth]{../figures/base_property_locations.png}
    \caption{Simulated Property Locations}
    \label{fig:simulated_property}
\end{figure}

\subsection*{Storm Path Analysis}
provides


\includegraphics[width=\maxwidth]{../figures/high-level_storm_path.png}

\includegraphics[width=\maxwidth]{../figures/mid-level_storm_path.png}

\includegraphics[width=\maxwidth]{../figures/affected_properties.png}

\section*{Appendix - Generate Sample Property Data}
<<,eval=FALSE,tidy=TRUE>>=
###
# Generate simulated property data
###

library(ggmap)
library(ggplot2)
library(maptools)
library(sp)

source("./src/CommonFunctions.R")


# read census.gov county shapefile data
us.counties <- readShapeSpatial("./data/tl_2014_us_county/tl_2014_us_county.shp",
                               proj4string = CRS("+proj=longlat +datum=WGS84"))

# read census.gov state shapefile data
us.states <-readShapeSpatial("./data/tl_2014_us_state/tl_2014_us_state.shp",
                            proj4string = CRS("+proj=longlat +datum=WGS84"))

# select only states of interest
states.of.interest <- subset(us.states,STUSPS %in% c("VA"), select=GEOID)
counties.of.interest <- subset(us.counties,STATEFP == 51 &
                               NAME %in% c("Arlington", "Fairfax",
                                           "Alexandria",
                                           "Loudoun","Culpeper",
                                           "Rappahannock", "Fauquier",
                                           "Stafford","Prince William"))


###
# generate simulate property locations in the counties of interest
###

# generate long/lat coordinates and property value
generatePropertyData <- function(sp, num.pts=5) {
    # get Polygon definition for a county
    polygon <- attr(sp,"Polygons")[[1]]
    
    # get coordinates for the polygon defintion
    coords <- attr(polygon,"coords")
    colnames(coords) <- c("long","lat")
    
    # compute bounding box for the region
    bb <- c(min(coords[,"long"]),min(coords[,"lat"]),max(coords[,"long"]),max(coords[,"lat"]))
    names(bb) <- c("ll.lon","ll.lat","ur.lon","ur.lat")
    
    # randomly "place" points in the region, this is not perfect some will be out of region
    set.seed(13)
    lon.pts <- runif(num.pts, bb["ll.lon"], bb["ur.lon"])
    lat.pts <- runif(num.pts, bb["ll.lat"], bb["ur.lat"])
    value <- runif(num.pts,50000,200000)
    
    invisible(cbind(lon=lon.pts,lat=lat.pts, value=value))
}

ll <- lapply(attr(counties.of.interest,"polygons"), generatePropertyData,10)

df <- data.frame(do.call(rbind,ll))

property.locations <- SpatialPointsDataFrame(df[,1:2],data=data.frame(value=df[,3]),
                                proj4string=CRS("+proj=longlat +datum=WGS84"))
# makes points are in the counties of interest
sp.polygons <- SpatialPolygons(Srl=attr(counties.of.interest,"polygons"))
proj4string(sp.polygons) <- CRS(proj4string(counties.of.interest))
flag <- over(property.locations,sp.polygons)
df$col <- factor(ifelse(!is.na(flag),"in","out"),levels=c("in","out"))
df <- df[df$col=="in",]

this.map <- get_map("arlington, virginia",9)
county.boundaries <- cropToMap(this.map,counties.of.interest)

ggmap(this.map) +
    geom_point(aes(x=lon, y=lat, color=col), 
               data=df, 
               shape=16, size=4) +
    scale_color_manual(values=c("red","blue"))+
    geom_polygon(aes(x=long, y=lat, group=id), 
                 data=county.boundaries,
                 color="red",alpha=0) +
    geom_text(aes(x=as.numeric(as.character(INTPTLON)), 
                  y=as.numeric(as.character(INTPTLAT)), label=NAME),
              data=attr(counties.of.interest,"data"),
              size=3) +
    theme_nothing()

# Save property locations for analysis
property.df <- subset(df,select=-col)
save(property.df,file="./data/property_locations.RData")


@


\end{document}